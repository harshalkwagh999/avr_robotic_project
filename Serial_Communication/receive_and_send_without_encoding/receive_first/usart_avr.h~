#include <inttypes.h>
#include <avr/io.h>
#include <avr/interrupt.h>


#ifndef USART_H
#define USART_H
/****************************************************************************************************/

//Macros
#define RECEIVE_BUFF_SIZE 64
#define USART_RXC_VECT USART_RXC_vect	//This change from mcu to mcu


#define UBRR_VALUE(baud) ((F_CPU/(baud<<4))-1)


//Varriables
volatile char URBuff[RECEIVE_BUFF_SIZE];	//USART Receive Buffer
volatile int8_t UQFront;
volatile int8_t UQEnd;

//Functions
void USARTInitSend(uint16_t baudrate);
void USARTInitReceive(uint16_t baudrate);

uint8_t UDataAvailable();
char UReadData();

void UWriteData(char data);
void UWriteString(char *str);



 
/* void USARTInit(uint16_t ubrrvalue) */
/* { */
/* 	//Setup q */
/* 	UQFront=UQEnd=-1; */

/* 	//Set Baud rate */
/* 	UBRRH=(unsigned char)(ubrrvalue>>8); */
/* 	UBRRL=(unsigned char)ubrrvalue; */

/* 	/\*Set Frame Format */
	
/* 	Asynchronous mode */
/* 	No Parity */
/* 	1 StopBit */
/* 	char size 8 */

/* 	*\/ */

/* 	UCSRC=(1<<URSEL)|(3<<UCSZ0); */

/* 	/\*Enable Interrupts */
/* 	RXCIE- Receive complete */
/* 	UDRIE- Data register empty */

/* 	Enable The recevier and transmitter */

/* 	*\/ */

/* 	UCSRB=(1<<RXCIE)|(1<<TXEN);//Enable interrupt Resive Complit Interrupt Enable and Transmit Interrupt Enable. */
	
/* 	sei(); */

/* } */

/* //The USART ISR */
/* ISR(USART_RXC_VECT) */
/* { */
/* 	//Read the data */
/* 	char data=UDR; */

/* 	//Now add it to q */

/* 	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront)) */
/* 	{ */
/* 		//Q Full */
/* 		UQFront++; */
/* 		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0; */
/* 	} */
	

/* 	if(UQEnd==RECEIVE_BUFF_SIZE-1) */
/* 		UQEnd=0; */
/* 	else */
/* 		UQEnd++; */


/* 	URBuff[UQEnd]=data; */

/* 	if(UQFront==-1) UQFront=0; */

/* } */

/* char UReadData() */
/* { */
/* 	char data; */
	
/* 	//Check if q is empty */
/* 	if(UQFront==-1) */
/* 		return 0; */
	
/* 	data=URBuff[UQFront]; */
	
/* 	if(UQFront==UQEnd) */
/* 	{ */
/* 	//If single data is left */
/* 	//So empty q */
/* 	UQFront=UQEnd=-1; */
/* 	} */
/* 	else */
/* 	{ */
/* 		UQFront++; */

/* 		if(UQFront==RECEIVE_BUFF_SIZE) */
/* 		UQFront=0; */
/* 	} */

/* 	return data; */
/* } */

/* void UWriteData(char data) */
/* { */
/* 	//Wait For Transmitter to become ready */
/* 	while(!(UCSRA & (1<<UDRE))); */

/* 	//Now write */
/* 	UDR=data; */
/* } */

/* uint8_t UDataAvailable() */
/* { */
/* 	if(UQFront==-1) return 0; */
/* 	if(UQFront<UQEnd) */
/* 		return(UQEnd-UQFront+1); */
/* 	else if(UQFront>UQEnd) */
/* 		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1); */
/* 	else */
/* 		return 1; */
/* } */

/* void UWriteString(char *str) */
/* { */
/* 	while((*str)!='\0') */
/* 	{ */
/* 		UWriteData(*str); */
/* 		str++; */
/* 	} */

/* 	UWriteData('\0'); */
/* } */


/****************************************************************************************************/


#endif




